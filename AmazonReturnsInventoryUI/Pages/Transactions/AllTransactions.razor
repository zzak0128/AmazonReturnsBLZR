@page "/alltransactions"
@inject TransactionService service
@inject NavigationManager navManager

<h3>Transactions</h3>

@*<div class="container">
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="NavigateToCreate">New Transaction</button>
    </div>
</div>*@

<div class="container">
    <EditForm Model="NewTransaction">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="description">Description</label>
        <InputText id="description"></InputText>

        <label for="type">Type</label>
        <InputSelect @bind-Value="NewTransaction.Type">
            @foreach (var type in Enum.GetValues(typeof(TransactionType)))
            {
                <option>@type</option>
            }
        </InputSelect>

        <label for="Cost">Cost</label>
        <InputNumber @bind-Value="NewTransaction.Amount"/>

        <button class="btn btn-primary" type="submit">Add Transaction</button>
        <button class="btn btn-secondary" type="reset">Clear</button>
    </EditForm>
</div>


<div class="container">
   
        <strong>Total: @Format.AsCurrency(totalExpense)</strong>
        
    
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Transaction ID</th>
                <th>Description</th>
                <th>Type</th>
                <th>Cost</th>
            </tr>
        </thead>
        <tbody>

            @if (Transactions.Any())
            {
                @foreach (var transaction in Transactions)
                {
                    <tr>
                        <td>@transaction.TransactionID</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Type</td>
                        <td>@Format.AsCurrency(transaction.Amount)</td>
                        <td><button class="btn btn-secondary mb-3" @onclick="(() => ViewDetails(transaction.TransactionID))">Details</button><button class="btn btn-danger mb-3" @onclick="(() => DeleteTransaction(transaction))">Delete</button></td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="6"><strong>No Transactions</strong></td></tr>
            }
        </tbody>
    </table>
</div>


@code {
    double totalExpense = 0.00;
    public Transaction NewTransaction { get; set; } = new Transaction();

    List<Transaction> Transactions = new List<Transaction>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshTransactions();
        CalculateTotal();
    }

    private void CalculateTotal()
    {
        totalExpense = 0.00;
        foreach (var transaction in Transactions)
        {
            double amount = transaction.Amount;
            if(transaction.Type == TransactionType.Expense)
            {
                totalExpense -= amount;
            }
            else
            {
                totalExpense += amount;
            }
        }
    }

    private async Task RefreshTransactions()
    {
        Transactions = await service.GetTransactionsAsync();
    }

    private async Task AddTransaction()
    {
        await service.AddTransactionAsync(NewTransaction);
        NewTransaction = new Transaction();
    }

    private void NavigateToCreate()
    {
        navManager.NavigateTo("/alltransactions/new/0");
    }

    private void ViewDetails(int id)
    {
        navManager.NavigateTo($"/alltransactions/detail/{id}");
    }

    private async Task DeleteTransaction(Transaction transaction)
    {
        await service.DeleteTransactionAsync(transaction);
        await RefreshTransactions();
        CalculateTotal();
    }
}