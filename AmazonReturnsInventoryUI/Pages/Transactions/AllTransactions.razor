@page "/alltransactions"
@inject TransactionService service
@inject NavigationManager navManager

<h3>Transactions</h3>

<div class="container">
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="NavigateToCreate">New Transaction</button>
    </div>
</div>

<div class="container">
   
        <p>Total: @totalExpense</p>
        
    
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Transaction ID</th>
                <th>Description</th>
                <th>Type</th>
                <th>Quantity</th>
                <th>Amount</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>

            @if (Transactions.Any())
            {
                @foreach (var transaction in Transactions)
                {
                    <tr>
                        <td>@transaction.TransactionID</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Type</td>
                        <td>@transaction.Quantity</td>
                        <td>@transaction.Amount</td>
                        <td>@(transaction.Amount * transaction.Quantity)</td>
                        <td><button class="btn btn-secondary mb-3" @onclick="(() => ViewDetails(transaction.TransactionID))">Details</button><button class="btn btn-danger mb-3" @onclick="(() => DeleteTransaction(transaction))">Delete</button></td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="6"><strong>No Transactions</strong></td></tr>
            }
        </tbody>
    </table>
</div>


@code {
    double totalExpense = 0.00;

    List<Transaction> Transactions = new List<Transaction>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshTransactions();
        CalculateTotal();
    }

    private void CalculateTotal()
    {
        totalExpense = 0.00;
        foreach (var transaction in Transactions)
        {
            int quantity = transaction.Quantity;
            double amount = transaction.Amount;
            double itemTotal = quantity * amount;
            if(transaction.Type == TransactionType.Expense)
            {
                totalExpense -= itemTotal;
            }
            else
            {
                totalExpense += itemTotal;
            }
        }
    }

    private async Task RefreshTransactions()
    {
        Transactions = await service.GetTransactionsAsync();
    }

    private void NavigateToCreate()
    {
        navManager.NavigateTo("/alltransactions/new/0");
    }

    private void ViewDetails(int id)
    {
        navManager.NavigateTo($"/alltransactions/detail/{id}");
    }

    private async Task DeleteTransaction(Transaction transaction)
    {
        await service.DeleteTransactionAsync(transaction);
        await RefreshTransactions();
        CalculateTotal();
    }
}