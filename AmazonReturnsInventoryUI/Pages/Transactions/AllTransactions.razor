@page "/alltransactions"
@inject TransactionService service
@inject NavigationManager navManager

<h3>Transactions</h3>

<div class="container">
    <EditForm Model="@NewTransaction" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row align-items-end">
            <div class="col">
                <label class="form-label" for="description">Description</label>
                <InputText class="form-control" id="description" tabindex="0" @bind-Value="@NewTransaction.Description"></InputText>
            </div>
            <div class="col">
                <label class="form-label" for="type">Type</label>
                <InputSelect class="form-control" id="type" @bind-Value="@NewTransaction.Type">
                    @foreach (var type in Enum.GetValues(typeof(TransactionType)))
                    {
                        <option>@type</option>
                    }
                </InputSelect>
            </div>
            <div class="col">
                <label class="form-label" for="Cost">Cost</label>
                <InputNumber class="form-control" id="cost" @bind-Value="@NewTransaction.Cost" />
            </div>
            <div class="col" colspan="2">

                <button class="btn btn-primary" type="submit">Add Transaction</button>
                <button class="btn btn-secondary" type="reset">Clear</button>
            </div>
        </div>
    </EditForm>
</div>


<div class="container">

    <strong>Total: @Format.AsCurrency(totalExpense)</strong>


    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Description</th>
                <th>Type</th>
                <th>Cost</th>
                <th>
                    @if (IsFilteredByExpense)
                    {
                        <button class="btn btn-sm btn-warning" type="button" @onclick="@FilterByExpense">Expense</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-secondary" type="button" @onclick="@FilterByExpense">Expense</button>
                    }
                    @if (IsFilteredByIncome)
                    {
                        <button class="btn btn-sm btn-warning" type="button" @onclick="@FilterByIncome">Income</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-secondary" type="button" @onclick="@FilterByIncome">Income</button>
                    }
                </th>
            </tr>
        </thead>
        <tbody>

            @if (Transactions.Any())
            {
                @foreach (var transaction in Transactions)
                {
                    <tr>
                        <td>@transaction.TransactionID</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Type</td>
                        <td>@Format.AsCurrency(transaction.Cost)</td>
                        <td class="col-3">
                            <button class="btn btn-secondary" @onclick="(() => ViewDetails(transaction.TransactionID))">Details</button>
                            <button class="btn btn-secondary" @onclick="(() => NavigateToEdit(transaction.TransactionID))">Edit</button>
                            <button class="btn btn-danger" @onclick="(() => DeleteTransaction(transaction))">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="6"><strong>No Transactions</strong></td></tr>
            }
        </tbody>
    </table>
</div>


@code {
    double totalExpense = 0.00;
    public Transaction NewTransaction { get; set; } = new Transaction();

    public bool IsFilteredByExpense { get; set; } = false;
    public bool IsFilteredByIncome { get; set; } = false;

    List<Transaction> Transactions = new List<Transaction>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshTransactions();
        CalculateTotal();
    }

    private void CalculateTotal()
    {
        totalExpense = 0.00;
        foreach (var transaction in Transactions)
        {
            double amount = transaction.Cost;
            if (transaction.Type == TransactionType.Expense)
            {
                totalExpense -= amount;
            }
            else
            {
                totalExpense += amount;
            }
        }
    }

    private async Task RefreshTransactions()
    {
        Transactions = await service.GetTransactionsAsync();
    }

    private async Task HandleValidSubmit()
    {
        await service.AddTransactionAsync(NewTransaction);
        NewTransaction = new Transaction();
        await RefreshTransactions();
    }

    private void NavigateToCreate()
    {
        navManager.NavigateTo("/alltransactions/new");
    }

    private void ViewDetails(int id)
    {
        navManager.NavigateTo($"/alltransactions/detail/{id}");
    }

    private void NavigateToEdit(int id)
    {
        navManager.NavigateTo($"/alltransactions/edit/{id}");
    }

    private async Task DeleteTransaction(Transaction transaction)
    {
        await service.DeleteTransactionAsync(transaction);
        await RefreshTransactions();
        CalculateTotal();
    }

    private async Task FilterByExpense()
    {
        IsFilteredByExpense = !IsFilteredByExpense;
        List<Transaction> transactions = await service.GetTransactionsAsync();
        if (IsFilteredByExpense)
        {
            IsFilteredByIncome = false;
            Transactions = transactions.Where(i => i.Type == TransactionType.Expense).ToList();
        }
        else
        {
            Transactions = transactions;
        }
    }
    private async Task FilterByIncome()
    {
        IsFilteredByIncome = !IsFilteredByIncome;
        List<Transaction> transactions = await service.GetTransactionsAsync();
        if (IsFilteredByIncome)
        {
            IsFilteredByExpense = false;
            Transactions = transactions.Where(i => i.Type == TransactionType.Income).ToList();
        }
        else
        {
            Transactions = transactions;
        }
    }
}