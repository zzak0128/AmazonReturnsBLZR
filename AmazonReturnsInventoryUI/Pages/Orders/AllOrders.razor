@page "/allorders"
@inject OrderService service
@inject ItemService iService
@inject TransactionService tService
@inject NavigationManager navManager

<h3>Orders</h3>

<div class="container">
    <div>
        <button class="btn btn-primary" @onclick="NavigateToCreate">Start an Order</button>
        @if (isFilteredByProgress)
        {
            <button class="btn btn-warning" @onclick="FilterByProgress">In Process</button>
        }
        else
        {
            <button class="btn btn-secondary" @onclick="FilterByProgress">All Orders</button>
        }
    </div>
</div>

<div class="container">
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Items</th>
                <th>Customer Name</th>
                <th>Carrier</th>
                <th colspan="2">Status</th>
                <th>Order Total</th>
            </tr>
        </thead>
        <tbody>

            @if (Orders.Any())
            {
                @foreach (var order in Orders)
                {
                    <tr @ondblclick="(() => ViewDetails(order.OrderID))">
                        <td>@order.OrderID</td>
                        <td>
                            @foreach (var item in order.Items)
                            {
                                @item.Title
                                <br />
                            }
                        </td>
                        <td>@order.CustomerName</td>
                        <td>@order.Carrier</td>
                        <td>
                            <strong>@order.Status</strong>
                        </td>
                        <td>
                            <div class="btn-group-sm btn-group-vertical" role="group" aria-label="order-status">
                                <button type="button" class="btn btn-secondary" @onclick="(()=>MarkInProcess(order))">In Process</button>
                                <button type="button" class="btn btn-primary" @onclick="(()=>MarkShipped(order))">Shipped</button>
                                <button type="button" class="btn btn-success" @onclick="(()=>MarkDelivered(order))">Delivered</button>
                            </div>
                        </td>
                        <td>@Format.AsCurrency(order.OrderTotal - order.ShippingCost - order.SellingFees)</td>
                        <td class="col-2">
                            @*<button class="btn btn-secondary" @onclick="(() => ViewDetails(order.OrderID))">Details</button>*@
                            <button class="btn btn-secondary" @onclick="(() => NavigateToEdit(order.OrderID))">Edit</button>
                            <button class="btn btn-danger" @onclick="(() => DeleteOrder(order))">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="6"><strong>No Orders</strong></td></tr>
            }
        </tbody>
    </table>
</div>


@code {
    public Transaction NewTransaction { get; set; } = new Transaction();
    List<Item> items = new List<Item>();
    List<Order> Orders = new List<Order>();
    bool isFilteredByProgress = false;

    protected override async Task OnInitializedAsync()
    {
        items = await iService.GetItemsAsync();
        await RefreshOrders();
        await FilterByProgress();
    }

    private async Task RefreshOrders()
    {
        Orders = await service.GetOrdersAsync();
    }

    private async Task MarkInProcess(Order order)
    {
        order.Status = OrderStatus.InProcess;
        await service.AddOrderAsync(order);
    }

    private async Task MarkShipped(Order order)
    {
        order.Status = OrderStatus.Shipped;
        await service.AddOrderAsync(order);
    }

    private async Task MarkDelivered(Order order)
    {
        order.Status = OrderStatus.Delivered;
        await AddIncome(order);
        await service.AddOrderAsync(order);
        StateHasChanged();
    }

    private async Task AddIncome(Order order)
    {
        string itemStrings = "";
        foreach (var item in order.Items)
        {
            itemStrings += $"{item.Title},";
        }

        NewTransaction.Description = $"Sold Items: {itemStrings}";
        NewTransaction.Type = TransactionType.Income;
        double calulatedTotal = order.OrderTotal - order.SellingFees - order.ShippingCost;
        NewTransaction.Cost = calulatedTotal;

        await tService.AddTransactionAsync(NewTransaction);
    }

    private async Task FilterByProgress()
    {
        List<Order> allOrders = await service.GetOrdersAsync();
        isFilteredByProgress = !isFilteredByProgress;
        if (isFilteredByProgress)
        {
            Orders = allOrders.FindAll(o => o.Status != OrderStatus.Delivered).ToList();
        }
        else
        {
            Orders = allOrders;
        }
    }

    private void NavigateToCreate()
    {
        navManager.NavigateTo("/allorders/new");
    }

    private void NavigateToEdit(int id)
    {
        navManager.NavigateTo($"/allorders/Edit/{id}");
    }

    private void ViewDetails(int id)
    {
        navManager.NavigateTo($"/allorders/detail/{id}");
    }

    private async Task DeleteOrder(Order order)
    {
        await service.DeleteOrderAsync(order);
        await RefreshOrders();
    }
}