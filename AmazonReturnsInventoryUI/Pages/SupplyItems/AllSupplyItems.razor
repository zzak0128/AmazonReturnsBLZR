@page "/allsupplyitems"
@inject SupplyItemService service
@inject NavigationManager navManager

<h3>Supplies</h3>

<div class="container">
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="NavigateToCreate">Add Supply Item</button>
    </div>
</div>

<div class="container">
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>#   </th>
                <th>Item</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Unit</th>
                <th>Price per Unit</th>
            </tr>
        </thead>
        <tbody>

            @if (SupplyItems.Any())
            {
                @foreach (var supplyItem in SupplyItems)
                {
            <tr >
                <td>@supplyItem.SupplyID</td>
                <td>@supplyItem.Title</td>
                <td>@supplyItem.Description</td>
                <td>@supplyItem.Quantity</td>
                <td>@supplyItem.Unit</td>
                <td>@Format.AsCurrency(supplyItem.Price)</td>
                <td>
                    <button class="btn btn-secondary" type="button" @onclick="(() => NavigateToDetail(supplyItem.SupplyID))">Details</button>
                    <button class="btn btn-secondary" type="button" @onclick="(() => NavigateToEdit(supplyItem.SupplyID))">Edit</button>
                    <button class="btn btn-danger" type="button" @onclick="(() => DeleteSupplyItem(supplyItem))">Delete</button>
                </td>
            </tr>
                }
            }
            else
            {
                <tr><td colspan="6"><strong>No Transactions</strong></td></tr>
            }
        </tbody>
    </table>
</div>


@code {
    public SupplyItem SelectedItem { get; set; } = new SupplyItem();

    List<SupplyItem> SupplyItems = new List<SupplyItem>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshSupplyItems();
    }

    private async Task RefreshSupplyItems()
    {
        SupplyItems = await service.GetSupplyItemsAsync();
        SupplyItems.Sort((s1, s2) =>
        {
            return s1.Title.CompareTo(s2.Title);
        });
    }

    private void NavigateToDetail(int id)
    {
        navManager.NavigateTo($"/allsupplyitems/detail/{id}");
    }

    private void NavigateToCreate()
    {
        navManager.NavigateTo("/allsupplyitems/new");
    }

    private void NavigateToEdit(int id)
    {
        navManager.NavigateTo($"/allsupplyitems/edit/{id}");
    }

    private async Task DeleteSupplyItem(SupplyItem SupplyItem)
    {
        await service.DeleteSupplyItemAsync(SupplyItem);
        await RefreshSupplyItems();
    }
}
