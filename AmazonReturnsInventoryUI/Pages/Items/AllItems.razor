@page "/allitems"
@inject ItemService service
@inject NavigationManager navManager

<h3>Inventory</h3>

<div class="container">
            <div>
                <button class="btn btn-primary" @onclick="NavigateToCreate">Add Item</button>
            </div>
            <div>
                <h4>Sort by</h4>

                <div class="btn-group">

                    @if (isSortByTitle && !isSortByPrice)
                    {
                        <button class="btn btn-primary" type="button" @onclick="@SortItemsByTitle">Sort Title</button>
                    }
                    else
                    {
                        <button class="btn btn-secondary" type="button" @onclick="@SortItemsByTitle">Sort Title</button>
                    }

                    @if (isSortByPrice && !isSortByTitle)
                    {
                        <button class="btn btn-primary" type="button" @onclick="@SortItemsByPrice">Sort Price</button>
                    }
                    else
                    {
                        <button class="btn btn-secondary" type="button" @onclick="@SortItemsByPrice">Sort Price</button>
                    }
                </div>
            </div>
        <div>
            <h4>Filter</h4>
            @if (isFiltered)
            {
                <button class="btn btn-primary" type="button" @onclick="@FilterBySold">All Items</button>
            }
            else
            {
                <button class="btn btn-secondary" type="button" @onclick="@FilterBySold">Unsold Items</button>
            }
        </div>
    </div>

<div class="container-fluid">
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Pallet#</th>
                <th>Title</th>
                <th>Description</th>
                <th>Category</th>
                <th>Condition</th>
                <th>Price</th>
                <th>Markdown Price</th>
                <th>Sold</th>
            </tr>
        </thead>
        <tbody>

            @if (Items.Any())
            {
                @foreach (var item in Items)
                {
                    <tr>
                        <td>@item.PalletNumber</td>
                        <td>@item.Title</td>
                        <td>@item.Description</td>
                        <td>@item.Category</td>
                        <td>@item.Condition</td>
                        <td>@Format.AsCurrency(item.Price)</td>
                        <td>@Calc.MultiplyDoublesAsCurrency(item.Price, 0.75)</td>
                        @if (item.SoldPrice > 0)
                        {
                            <td><input class="form-check-Input" type="checkbox" checked disabled="disabled" /></td>
                        }
                        else
                        {
                            <td><input class="form-check-Input" type="checkbox" disabled="disabled" /></td>
                        }
                    <td>
                        <button class="btn btn-secondary" @onclick="(() => NavigateToDetails(item.ItemID))">Details</button>
                        <button class="btn btn-secondary" @onclick="(() => NavigateToEdit(item.ItemID))">Edit</button>
                        <button class="btn btn-danger" @onclick="(() => DeleteItem(item))">Delete</button>
                    </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="6"><strong>No Transactions</strong></td></tr>
            }
        </tbody>
    </table>
</div>


@code {
    private bool isSortByTitle = false;
    private bool isSortByPrice = false;
    private bool isFiltered = false;

    List<Item> Items = new List<Item>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
        SortItemsByTitle();
        await FilterBySold();
    }

    private async Task RefreshItems()
    {
        Items = await service.GetItemsAsync();
    }

    private void NavigateToCreate()
    {
        navManager.NavigateTo("/allitems/new");
    }

    private void NavigateToEdit(int id)
    {
        navManager.NavigateTo($"/allitems/edit/{id}");
    }

    private void NavigateToDetails(int id)
    {
        navManager.NavigateTo($"/allitems/detail/{id}");
    }

    private async Task DeleteItem(Item item)
    {
        await service.DeleteItemAsync(item);
        await RefreshItems();
    }


    private void SortItemsByTitle()
    {
        Items.Sort((i1, i2) => i1.Title.CompareTo(i2.Title));
        isSortByTitle = true;
        if (isSortByPrice)
        {
            isSortByPrice = false;
        }
    }

    private void SortItemsByPrice()
    {
        Items.Sort((i1, i2) => i1.Price.CompareTo(i2.Price));
        isSortByPrice = true;
        if (isSortByTitle)
        {
            isSortByTitle = false;
        }
    }

    private async Task FilterBySold()
    {
        isFiltered = !isFiltered;
        List<Item> allItems = await service.GetItemsAsync();
        if (isFiltered)
        {

            Items = allItems.Where(i => i.SoldPrice == 0).ToList();
        }
        else
        {
            Items = allItems;
        }

    }
}
